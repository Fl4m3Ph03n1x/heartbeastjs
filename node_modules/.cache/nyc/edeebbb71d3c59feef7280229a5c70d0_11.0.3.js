"use strict";var cov_231oy23p9p=function(){var path="/home/pedro/Workspace/heartbeastjs/src/heartbeat.js",hash="1b7e9a347be576e85ef3d13337b168d3bac8bda5",global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/home/pedro/Workspace/heartbeastjs/src/heartbeat.js",statementMap:{"0":{start:{line:3,column:19},end:{line:3,column:47}},"1":{start:{line:13,column:25},end:{line:276,column:1}},"2":{start:{line:15,column:20},end:{line:18,column:5}},"3":{start:{line:20,column:19},end:{line:20,column:35}},"4":{start:{line:21,column:18},end:{line:21,column:33}},"5":{start:{line:28,column:19},end:{line:30,column:5}},"6":{start:{line:44,column:24},end:{line:45,column:48}},"7":{start:{line:45,column:8},end:{line:45,column:48}},"8":{start:{line:56,column:28},end:{line:56,column:42}},"9":{start:{line:56,column:34},end:{line:56,column:42}},"10":{start:{line:72,column:28},end:{line:77,column:5}},"11":{start:{line:73,column:8},end:{line:74,column:68}},"12":{start:{line:74,column:12},end:{line:74,column:68}},"13":{start:{line:76,column:8},end:{line:76,column:31}},"14":{start:{line:89,column:27},end:{line:89,column:40}},"15":{start:{line:89,column:33},end:{line:89,column:40}},"16":{start:{line:106,column:27},end:{line:113,column:5}},"17":{start:{line:107,column:8},end:{line:108,column:67}},"18":{start:{line:108,column:12},end:{line:108,column:67}},"19":{start:{line:110,column:8},end:{line:110,column:29}},"20":{start:{line:111,column:8},end:{line:111,column:35}},"21":{start:{line:112,column:8},end:{line:112,column:68}},"22":{start:{line:122,column:20},end:{line:122,column:30}},"23":{start:{line:122,column:26},end:{line:122,column:30}},"24":{start:{line:133,column:20},end:{line:135,column:5}},"25":{start:{line:134,column:8},end:{line:134,column:23}},"26":{start:{line:144,column:20},end:{line:144,column:30}},"27":{start:{line:144,column:26},end:{line:144,column:30}},"28":{start:{line:157,column:20},end:{line:159,column:5}},"29":{start:{line:158,column:8},end:{line:158,column:23}},"30":{start:{line:168,column:25},end:{line:172,column:5}},"31":{start:{line:169,column:8},end:{line:169,column:39}},"32":{start:{line:170,column:8},end:{line:170,column:35}},"33":{start:{line:171,column:8},end:{line:171,column:68}},"34":{start:{line:181,column:17},end:{line:187,column:5}},"35":{start:{line:182,column:8},end:{line:182,column:38}},"36":{start:{line:183,column:8},end:{line:183,column:29}},"37":{start:{line:184,column:8},end:{line:184,column:26}},"38":{start:{line:185,column:8},end:{line:185,column:35}},"39":{start:{line:186,column:8},end:{line:186,column:33}},"40":{start:{line:201,column:18},end:{line:208,column:5}},"41":{start:{line:202,column:8},end:{line:203,column:61}},"42":{start:{line:203,column:12},end:{line:203,column:61}},"43":{start:{line:205,column:8},end:{line:205,column:39}},"44":{start:{line:206,column:8},end:{line:206,column:51}},"45":{start:{line:207,column:8},end:{line:207,column:68}},"46":{start:{line:222,column:22},end:{line:227,column:5}},"47":{start:{line:223,column:8},end:{line:224,column:61}},"48":{start:{line:224,column:12},end:{line:224,column:61}},"49":{start:{line:226,column:8},end:{line:226,column:28}},"50":{start:{line:239,column:22},end:{line:239,column:47}},"51":{start:{line:239,column:28},end:{line:239,column:47}},"52":{start:{line:248,column:18},end:{line:257,column:5}},"53":{start:{line:249,column:8},end:{line:250,column:19}},"54":{start:{line:250,column:12},end:{line:250,column:19}},"55":{start:{line:252,column:8},end:{line:252,column:42}},"56":{start:{line:253,column:8},end:{line:253,column:40}},"57":{start:{line:254,column:8},end:{line:254,column:25}},"58":{start:{line:255,column:8},end:{line:255,column:25}},"59":{start:{line:256,column:8},end:{line:256,column:28}},"60":{start:{line:259,column:4},end:{line:275,column:7}},"61":{start:{line:278,column:0},end:{line:278,column:34}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:25},end:{line:13,column:26}},loc:{start:{line:13,column:31},end:{line:276,column:1}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:29,column:17},end:{line:29,column:18}},loc:{start:{line:29,column:23},end:{line:29,column:25}},line:29},"2":{name:"(anonymous_2)",decl:{start:{line:44,column:24},end:{line:44,column:25}},loc:{start:{line:45,column:8},end:{line:45,column:48}},line:45},"3":{name:"(anonymous_3)",decl:{start:{line:56,column:28},end:{line:56,column:29}},loc:{start:{line:56,column:34},end:{line:56,column:42}},line:56},"4":{name:"(anonymous_4)",decl:{start:{line:72,column:28},end:{line:72,column:29}},loc:{start:{line:72,column:43},end:{line:77,column:5}},line:72},"5":{name:"(anonymous_5)",decl:{start:{line:89,column:27},end:{line:89,column:28}},loc:{start:{line:89,column:33},end:{line:89,column:40}},line:89},"6":{name:"(anonymous_6)",decl:{start:{line:106,column:27},end:{line:106,column:28}},loc:{start:{line:106,column:41},end:{line:113,column:5}},line:106},"7":{name:"(anonymous_7)",decl:{start:{line:122,column:20},end:{line:122,column:21}},loc:{start:{line:122,column:26},end:{line:122,column:30}},line:122},"8":{name:"(anonymous_8)",decl:{start:{line:133,column:20},end:{line:133,column:21}},loc:{start:{line:133,column:31},end:{line:135,column:5}},line:133},"9":{name:"(anonymous_9)",decl:{start:{line:144,column:20},end:{line:144,column:21}},loc:{start:{line:144,column:26},end:{line:144,column:30}},line:144},"10":{name:"(anonymous_10)",decl:{start:{line:157,column:20},end:{line:157,column:21}},loc:{start:{line:157,column:31},end:{line:159,column:5}},line:157},"11":{name:"(anonymous_11)",decl:{start:{line:168,column:25},end:{line:168,column:26}},loc:{start:{line:168,column:31},end:{line:172,column:5}},line:168},"12":{name:"(anonymous_12)",decl:{start:{line:181,column:17},end:{line:181,column:18}},loc:{start:{line:181,column:23},end:{line:187,column:5}},line:181},"13":{name:"(anonymous_13)",decl:{start:{line:201,column:18},end:{line:201,column:19}},loc:{start:{line:201,column:24},end:{line:208,column:5}},line:201},"14":{name:"(anonymous_14)",decl:{start:{line:222,column:22},end:{line:222,column:23}},loc:{start:{line:222,column:28},end:{line:227,column:5}},line:222},"15":{name:"(anonymous_15)",decl:{start:{line:239,column:22},end:{line:239,column:23}},loc:{start:{line:239,column:28},end:{line:239,column:47}},line:239},"16":{name:"(anonymous_16)",decl:{start:{line:248,column:18},end:{line:248,column:19}},loc:{start:{line:248,column:24},end:{line:257,column:5}},line:248},"17":{name:"(anonymous_17)",decl:{start:{line:256,column:18},end:{line:256,column:19}},loc:{start:{line:256,column:24},end:{line:256,column:26}},line:256}},branchMap:{"0":{loc:{start:{line:73,column:8},end:{line:74,column:68}},type:"if",locations:[{start:{line:73,column:8},end:{line:74,column:68}},{start:{line:73,column:8},end:{line:74,column:68}}],line:73},"1":{loc:{start:{line:107,column:8},end:{line:108,column:67}},type:"if",locations:[{start:{line:107,column:8},end:{line:108,column:67}},{start:{line:107,column:8},end:{line:108,column:67}}],line:107},"2":{loc:{start:{line:202,column:8},end:{line:203,column:61}},type:"if",locations:[{start:{line:202,column:8},end:{line:203,column:61}},{start:{line:202,column:8},end:{line:203,column:61}}],line:202},"3":{loc:{start:{line:223,column:8},end:{line:224,column:61}},type:"if",locations:[{start:{line:223,column:8},end:{line:224,column:61}},{start:{line:223,column:8},end:{line:224,column:61}}],line:223},"4":{loc:{start:{line:249,column:8},end:{line:250,column:19}},type:"if",locations:[{start:{line:249,column:8},end:{line:250,column:19}},{start:{line:249,column:8},end:{line:250,column:19}}],line:249}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const isFunction=(++cov_231oy23p9p.s[0],require("lodash.isfunction"));/**
 *  @public
 *  @author Pedro Miguel P. S. Martins
 *  @version 1.0.1
 *  @module heartBeat
 *  @desc   Runs a given function periodically and watches for timeouts.
 */++cov_231oy23p9p.s[1];const heartBeatFactory=()=>{++cov_231oy23p9p.f[0];const DEFAULT=(++cov_231oy23p9p.s[2],{TIMEOUT:5000,INTERVAL:3000});let interval=(++cov_231oy23p9p.s[3],DEFAULT.INTERVAL),timeout=(++cov_231oy23p9p.s[4],DEFAULT.TIMEOUT),ping,pong,timer,lastHeartbeatTime,timeoutTimer;const events=(++cov_231oy23p9p.s[5],{timeout:()=>{++cov_231oy23p9p.f[1];}});/**
     *  @public 
     *  @func       hasTimedOut
     *  @returns    {Boolean}   <code>true</code> if the heartbeat has timedout, 
     *                          <code>false</code> otherwise. 
     * 
     *  @description    Used to detected if a heartbeat has timedout. A 
     *                  heartbeat times out when it sends a ping, and receives 
     *                  no pong after a given period of time. The timeout period
     *                  can be manipulated via <code>setBeatTimeout</code>.
     * @see             <code>setBeatTimeout</code>
     */++cov_231oy23p9p.s[6];const hasTimedOut=()=>{++cov_231oy23p9p.f[2];++cov_231oy23p9p.s[7];return Date.now()-lastHeartbeatTime>timeout;};/**
     *  @public 
     *  @func       getBeatInterval
     *  @returns    {Number}        The current heartbeat interval.
     * 
     *  @description    Returns the current hearbeat interval. The heartbeat 
     *                  interval is the interval at which the heartbeat will run
     *                  the <code>ping</code> function.
     */++cov_231oy23p9p.s[8];const getBeatInterval=()=>{++cov_231oy23p9p.f[3];++cov_231oy23p9p.s[9];return interval;};/**
     *  @public 
     *  @func   setBeatInterval
     *  @param  {Number}        newInterval The new heartbeat interval.  
     *  @throws {TypeError}     If <code>newInterval</code> is not a Number.
     * 
     *  @description    Sets the current heartbeat interval to the given one. 
     *                  Note that setting the heartbeat interval will <b>not</b>
     *                  affetct current heartbeat running. You must 
     *                  <code>stop</code> them and then <code>start</code> them
     *                  for the new interval to be applied.
     * @see             <code>stop</code>
     * @see             <code>start</code>
     */++cov_231oy23p9p.s[10];const setBeatInterval=newInterval=>{++cov_231oy23p9p.f[4];++cov_231oy23p9p.s[11];if(isNaN(newInterval)){++cov_231oy23p9p.b[0][0];++cov_231oy23p9p.s[12];throw new TypeError(`${newInterval} must be a Number.`);}else{++cov_231oy23p9p.b[0][1];}++cov_231oy23p9p.s[13];interval=newInterval;};/**
     *  @public 
     *  @func       getBeatTimeout
     *  @returns    {Number}        The current timeout.
     * 
     *  @description    Returns the current hearbeat timeout. The heartbeat 
     *                  timeout is the amount of time that must pass for the 
     *                  <code>hasTimedOut</code> to return <code>true</code>.
     * @see             <code>hasTimedOut</code>
     */++cov_231oy23p9p.s[14];const getBeatTimeout=()=>{++cov_231oy23p9p.f[5];++cov_231oy23p9p.s[15];return timeout;};/**
     *  @public 
     *  @func   setBeatTimeout
     *  @param  {Number}        newTimeout  The new newTimeout. 
     *  @throws {TypeError}     If <code>newTimeout</code> is not a Number.
     * 
     *  @description    Sets the current timeout to the given one. 
     *                  Setting the timeout this way will immediatly affect the
     *                  <code>hasTimedOut</code> method without the need to 
     *                  restart the heartbeat object. Invoking this method 
     *                  <b>does</b> restart the timer controlling the 
     *                  <code>onTimeout</code> event.
     *  @see            <code>hasTimedOut</code>
     *  @see            <code>onTimeout</code>
     */++cov_231oy23p9p.s[16];const setBeatTimeout=newTimeout=>{++cov_231oy23p9p.f[6];++cov_231oy23p9p.s[17];if(isNaN(newTimeout)){++cov_231oy23p9p.b[1][0];++cov_231oy23p9p.s[18];throw new TypeError(`${newTimeout} must be a Number.`);}else{++cov_231oy23p9p.b[1][1];}++cov_231oy23p9p.s[19];timeout=newTimeout;++cov_231oy23p9p.s[20];clearTimeout(timeoutTimer);++cov_231oy23p9p.s[21];timeoutTimer=setTimeout(events.timeout,getBeatTimeout());};/**
     *  @public 
     *  @func       getPing
     *  @returns    {Object}    The current object being used as a ping.
     * 
     *  @description    Returns the ping object being used. 
     */++cov_231oy23p9p.s[22];const getPing=()=>{++cov_231oy23p9p.f[7];++cov_231oy23p9p.s[23];return ping;};/**
     *  @public 
     *  @func   setPing
     *  @param  {Object}    newPing  The new ping object.  
     * 
     *  @description    Sets the current ping object. A ping object can 
     *                  be anything that the receiver accepts, from a Buffer of
     *                  bytes to plain Object to a primitive. 
     */++cov_231oy23p9p.s[24];const setPing=newPing=>{++cov_231oy23p9p.f[8];++cov_231oy23p9p.s[25];ping=newPing;};/**
     *  @public 
     *  @func       getPong
     *  @returns    {Object}    The current object being used as a pong.
     * 
     *  @description    Returns the pong object being used. 
     */++cov_231oy23p9p.s[26];const getPong=()=>{++cov_231oy23p9p.f[9];++cov_231oy23p9p.s[27];return pong;};/**
     *  @public 
     *  @func   setPong
     *  @param  {Object}    newPong  The new pong object.  
     * 
     *  @description    Sets the pong object we expect to receive from the 
     *                  target of the heartbeats. This is only needed if there 
     *                  is a need to distinguish between normal messages from 
     *                  the target of heartbeat and pong messages that need to 
     *                  be processed differently.
     */++cov_231oy23p9p.s[28];const setPong=newPong=>{++cov_231oy23p9p.f[10];++cov_231oy23p9p.s[29];pong=newPong;};/**
     *  @public 
     *  @func       receivedPong
     * 
     *  @description    Notifies the hearbeat that it has received a pong from 
     *                  the target. 
     */++cov_231oy23p9p.s[30];const receivedPong=()=>{++cov_231oy23p9p.f[11];++cov_231oy23p9p.s[31];lastHeartbeatTime=Date.now();++cov_231oy23p9p.s[32];clearTimeout(timeoutTimer);++cov_231oy23p9p.s[33];timeoutTimer=setTimeout(events.timeout,getBeatTimeout());};/**
     *  @public 
     *  @func   stop
     * 
     *  @description    Stops the heartbeat object and clears all internal 
     *                  states. 
     */++cov_231oy23p9p.s[34];const stop=()=>{++cov_231oy23p9p.f[12];++cov_231oy23p9p.s[35];lastHeartbeatTime=undefined;++cov_231oy23p9p.s[36];clearInterval(timer);++cov_231oy23p9p.s[37];timer=undefined;++cov_231oy23p9p.s[38];clearTimeout(timeoutTimer);++cov_231oy23p9p.s[39];timeoutTimer=undefined;};/**
     *  @public 
     *  @func   start
     *  @param  {Function}  fn  The function that will be executed periodically
     *                          by the heartbeat object.  
     *  @throws {TypeError}     If <code>fn</code> is not a function.
     * 
     *  @description    Starts the heartbeat object, executing the given 
     *                  function <code>fn</code> every interval. If you want to 
     *                  send a ping to an object every interval, this is where 
     *                  you defined that.
     */++cov_231oy23p9p.s[40];const start=fn=>{++cov_231oy23p9p.f[13];++cov_231oy23p9p.s[41];if(!isFunction(fn)){++cov_231oy23p9p.b[2][0];++cov_231oy23p9p.s[42];throw new TypeError(`${fn} must be a function.`);}else{++cov_231oy23p9p.b[2][1];}++cov_231oy23p9p.s[43];lastHeartbeatTime=Date.now();++cov_231oy23p9p.s[44];timer=setInterval(fn,getBeatInterval());++cov_231oy23p9p.s[45];timeoutTimer=setTimeout(events.timeout,getBeatTimeout());};/**
     *  @public 
     *  @func   onTimeout
     *  @param  {Function}  fn  The function to be executed when a timeout 
     *                          occurs.  
     *  @throws {TypeError}     If <code>fn</code> is not a function.
     * 
     *  @description    Runs the given function when the heartbeat detects a 
     *                  timeout. A timeout is deteceted if 
     *                  <code>receivedPong</code> is not called within the 
     *                  defined 'timeout' period.
     */++cov_231oy23p9p.s[46];const onTimeout=fn=>{++cov_231oy23p9p.f[14];++cov_231oy23p9p.s[47];if(!isFunction(fn)){++cov_231oy23p9p.b[3][0];++cov_231oy23p9p.s[48];throw new TypeError(`${fn} must be a function.`);}else{++cov_231oy23p9p.b[3][1];}++cov_231oy23p9p.s[49];events.timeout=fn;};/**
     *  @public 
     *  @func       isBeating
     *  @returns    {Boolean}   <code>true</code> if the heartbeat is active, 
     *                          <code>false</code> otherwise.
     * 
     *  @description    Returns <code>true</code> if the heartbeat is active, 
     *                  <code>false</code> otherwise. A heartbeat is considered 
     *                  active if it was started and has not beend stopped yet.
     */++cov_231oy23p9p.s[50];const isBeating=()=>{++cov_231oy23p9p.f[15];++cov_231oy23p9p.s[51];return timer!==undefined;};/**
     *  @public 
     *  @func   reset
     * 
     *  @description    Stops the heartbeat if it is beating, and resets all 
     *                  properties to the original default values.
     */++cov_231oy23p9p.s[52];const reset=()=>{++cov_231oy23p9p.f[16];++cov_231oy23p9p.s[53];if(isBeating()){++cov_231oy23p9p.b[4][0];++cov_231oy23p9p.s[54];stop();}else{++cov_231oy23p9p.b[4][1];}++cov_231oy23p9p.s[55];setBeatInterval(DEFAULT.INTERVAL);++cov_231oy23p9p.s[56];setBeatTimeout(DEFAULT.TIMEOUT);++cov_231oy23p9p.s[57];ping=undefined;++cov_231oy23p9p.s[58];pong=undefined;++cov_231oy23p9p.s[59];onTimeout(()=>{++cov_231oy23p9p.f[17];});};++cov_231oy23p9p.s[60];return Object.freeze({getBeatInterval,setBeatInterval,getBeatTimeout,setBeatTimeout,hasTimedOut,getPing,setPing,getPong,receivedPong,setPong,stop,start,reset,isBeating,onTimeout});};++cov_231oy23p9p.s[61];module.exports=heartBeatFactory;